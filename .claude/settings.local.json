{
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(rm:*)",
      "Bash(rg:*)",
      "WebFetch(domain:docs.convex.dev)",
      "WebFetch(domain:stack.convex.dev)",
      "Bash(pnpm add:*)",
      "mcp__ide__getDiagnostics",
      "Bash(pgrep:*)",
      "Bash(lsof:*)",
      "Bash(ps:*)",
      "Bash(pnpm build:*)",
      "Bash(npm run build:*)",
      "Bash(pnpm tsc:*)",
      "Bash(pnpm lint:*)",
      "Bash(git worktree:*)",
      "Bash(npx @anthropic-ai/mcp list:*)",
      "WebFetch(domain:github.com)",
      "Bash(npx:*)",
      "Bash(gh issue create:*)",
      "Bash(mkdir:*)",
      "Bash(git branch:*)",
      "Bash(pnpm install:*)",
      "Bash(ls:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(vercel ls:*)",
      "Bash(gh pr view:*)",
      "Bash(gh issue close:*)",
      "Bash(gh project list:*)",
      "Bash(gh project view:*)",
      "Bash(gh project field-list:*)",
      "Bash(gh project item-list:*)",
      "Bash(gh repo view:*)",
      "Bash(gh issue list:*)",
      "Bash(gh pr list:*)",
      "Bash(gh project item-add:*)",
      "Bash(gh auth:*)",
      "Bash(gh api:*)",
      "Bash(gh project create:*)",
      "Bash(git commit:*)",
      "Bash(chmod:*)",
      "Bash(gh pr merge:*)",
      "Bash(./scripts/setup-worktree.sh:*)",
      "Bash(true)",
      "Bash(SKIP_ENV_VALIDATION=true pnpm build)",
      "Bash(cp:*)",
      "Bash(gh pr create:*)",
      "Bash(git restore:*)",
      "Bash(git fetch:*)",
      "Bash(git pull:*)",
      "Bash(git checkout:*)",
      "Bash(gh project item-edit:*)",
      "Bash(gh pr diff:*)",
      "Bash(gh pr checks:*)",
      "Bash(gh issue view:*)",
      "Bash(pkill:*)",
      "Bash(SKIP_ENV_VALIDATION=true pnpm dev)",
      "Bash(pnpm env:sync:*)",
      "Bash(pnpm dev:*)",
      "Bash(pnpm biome check:*)",
      "WebFetch(domain:www.convex.dev)",
      "Bash(pnpm format:*)",
      "Bash(gh issue edit:*)",
      "Bash(git merge:*)",
      "Bash(--title \"feat: move signin to server actions\" )",
      "Bash(--body \"## Summary\nImplements server actions for authentication to improve security and provide better error handling and loading states.\n\n- âœ… Server-side validation of signin parameters\n- âœ… Progressive enhancement with form-based signin\n- âœ… Proper loading states and error handling\n- âœ… Hybrid approach maintaining OAuth flow compatibility\n\n## Changes\n- Created \\`src/app/actions/auth.ts\\` with server actions for authentication\n- Updated \\`SignInOptions\\` component to use server validation before client OAuth\n- Added new \\`SignInForm\\` component with progressive enhancement\n- Implemented proper loading states with \\`useTransition\\` and \\`useFormStatus\\`\n- Added toast notifications for error feedback\n\n## Test Plan\n- [ ] Sign in with GitHub works (production only)\n- [ ] Sign in as Guest works (non-production)\n- [ ] Loading states display during signin\n- [ ] Error messages show appropriately\n- [ ] No console errors during signin flow\n- [ ] Form submission works without JavaScript (progressive enhancement)\n\nCloses #80\n\nðŸ¤– Generated with [Claude Code](https://claude.ai/code)\")",
      "Bash(cat:*)",
      "Bash(SKIP_ENV_VALIDATION=true bun run build)",
      "Bash(bun run lint:*)",
      "Bash(bun test:*)",
      "Bash(git rm:*)",
      "Bash(SKIP_ENV_VALIDATION=true bun run build)",
      "Bash(gh pr close:*)",
      "Bash(bash -c:*)",
      "Bash(gh pr comment:*)",
      "Bash(git rebase:*)",
      "Bash(git clone:*)",
      "Bash(bun add:*)",
      "Bash(git reset:*)",
      "Bash(bun run:*)",
      "WebFetch(domain:discuss.codemirror.net)",
      "Bash(bun install:*)"
    ],
    "deny": []
  }
}
